from tabula import read_pdf_with_template
from tabulate import tabulate
import pandas as pd
import os, pdfplumber
import sys

sys.path.append('..')


def parseArrestReports(dfArrests, reportPath, templatesPath):
    # Names of tabula templates used
    arrestPage1Template = 'arrest-template-page1.json'
    arrestPage1NarrativeTemplate = 'arrest-template-narrative-page1.json'
    arrestPage2Template = 'arrest-template-page2.json'
    incidentPage1 = 'incident-page1.json'
    incidentPage1Table = 'incident-page1-table.json'
    incidentPage2AdditionalProperty = 'incident-additional-property-page3.json'
    incidentPage3AdditionalProperty = 'incident-additional-property-page3.json'
    incidentPage2AdditionalName = 'incident-additional-name-page2.json'
    incidentPage3AdditionalName = 'incident-additional-name-page3.json'

    # Loop through all reports, each report is a single PDF
    for report in os.listdir(reportPath):
        # Check to make sure a PdfArrests as JSON templates are also in folder
        if report.endswith('pdf'):
            try:
                # Check Length so that 2 page reports are handled correctly
                pdfArrests = pdfplumber.open(reportPath + '/' + report)
                page = pdfArrests.pages[0]
                pdfLen = len(pdfArrests.pages)
                text = page.extract_text()
                if text.split("\n")[0] == 'ARREST REPORT':
                    type = 1
                if text.split("\n")[0] == 'INCIDENT/INVESTIGATION':
                    type = 2
                    if pdfLen > 1:
                        print(pdfLen, report)
                    continue
                # else:
                #     continue
            except Exception as e:
                print(report)
                print(e)
                continue

            case = ''
            # Read in the first page of PdfArrests with JSON template generated through Tabula GUI
            arrests = read_pdf_with_template(reportPath + '/' + report, templatesPath + '/' + arrestPage1Template,
                                             pages='1')
            # Loop through the Dataframes generated by reading the PDF
            # Each box will generate a unique Dataframe
            # We will loop twice, once to get the Case # so we can use it as a index for the overall dataframe
            for x in arrests:
                columns = list(x.columns)
                if 'Case #' in columns:
                    case = x._get_value(0, 1, takeable=True)
                    dfArrests.loc[case, 'Case #'] = case
                    break
            # The number of inserts fragments the dataframe so for performance reasons copy between each report
            dfArrests = dfArrests.copy()
            # And again to insert all the remaining data
            for x in arrests:
                l = 1
                columns = list(x.columns)
                # Check for the drug table
                if 'Type Measure' in columns:
                    for ind in x.index:
                        unamedValue = ''
                        for colName in columns:
                            # Tabula generated extra columns due to the entries not being directly below the title
                            # Save the values as the correct column name is the next one over
                            if 'Unnamed:' in colName:
                                unamedValue = x.loc[ind, colName]
                                continue
                            if str(x.loc[ind, colName]) == 'nan':
                                if unamedValue != '':
                                    dfArrests.loc[case, str(colName) + str(' ') + str(l)] = unamedValue
                                    unamedValue = ''
                                else:
                                    dfArrests.loc[case, str(colName) + str(' ') + str(l)] = ''
                            else:
                                dfArrests.loc[case, str(colName) + str(' ') + str(l)] = x.loc[ind, colName]
                        l += 1
                # Tabula generated extra columns for some boxes due to the entries not being directly below the title
                elif 'Unnamed: 0' in columns:
                    # Create a list of all values and collapse them together, removing any nan values
                    # Collapse columns names too, removing any unnamed columns
                    valueList = x.values.tolist()[0]
                    values = ''
                    columnTitle = ''
                    for y in valueList:
                        if str(y) != 'nan':
                            values += ' ' + str(y)
                    for colName in columns:
                        if 'Unnamed:' not in str(colName):
                            columnTitle += ' ' + str(colName)
                    if str(values) == 'nan':
                        continue
                    dfArrests.loc[case, columnTitle.strip()] = values
                else:
                    # For all dataframes with one column and one value input them into the large dataframe
                    if x.empty:
                        dfArrests.loc[case, columns[0]] = ''
                        continue
                    if "Case #" in columns:
                        continue
                    entry = x._get_value(0, 0, takeable=True)
                    if entry=='$1000 Secured Bond combined with On View Misd. Larceny (19-0049064)':
                        print(report)
                    dfArrests.loc[case, columns[0]] = entry


            # Read in the first page of PdfArrests with JSON template generated through Tabula GUI
            #This is the narrative template because including the narrative box in the full page template
            #caused a large number of erroneous columns and incomplete fields
            arrestsNarrative = read_pdf_with_template(reportPath + '/' + report,
                                             templatesPath + '/' + arrestPage1NarrativeTemplate,
                                             pages='1')
            for x in arrestsNarrative:
                l = 1
                # The narrative ends up in both columns and values so aggregate into a single string
                columns = list(x.columns)
                if x.size<1:
                    continue
                try:
                    valueList = x.values.tolist()[0]
                except:
                    print(reportPath, report)
                    input(x.values)
                values = ''
                columnStr = ''
                for y in valueList:
                    if str(y) != 'nan':
                        values += ' ' + str(y)
                for colName in columns:
                    if 'Unnamed:' not in str(colName):
                        columnStr += ' ' + str(colName)
                if str(values) == 'nan':
                    continue
                narrative = columnStr + values
                dfArrests.loc[case, 'Narrative'] = narrative


            # For reports with more than 1 page, read the extra charge table and input the values
            if pdfLen > 1:
                arrests2 = read_pdf_with_template(reportPath + '/' + report, templatesPath + '/' + arrestPage2Template,
                                                  pages='2')
                columns = list(x.columns)
                for x in arrests2:
                    n = 4
                    columns = list(x.columns)
                    for ind in x.index:
                        for colName in columns:
                            dfArrests.loc[case, str(colName) + str(' ') + str(n)] = x.loc[ind, colName]
                        n += 1
    return dfArrests


def main(argv):
    # Pass in command line arguments for report and templates if any
    if argv != []:
        reportPath = argv[0]
        try:
            if not reportPath.endswith('/'):
                reportPath += '/'
        except:
            print('A template file for page 1 must be defined')
            return
    else:
        # hardcode paths if known
        reportPath = '../../data/durham/'

    # Initialize the dataframe with Case # as all reports will have it
    columnNames = ['Case #']
    dfArrests = pd.DataFrame(columns=columnNames)

    for x in os.walk(reportPath):
        print(x[0])
        dfArrests = parseArrestReports(dfArrests, str(x[0]), reportPath + '/templates/')

    # print(tabulate(dfArrests, headers='keys', tablefmt='psql', intfmt=".1f"))

    dfArrests.to_csv(reportPath + 'arrests_reports_data.csv')
    print('Extracted data saved in ' + reportPath)


if __name__ == "__main__":
    main(sys.argv[1:])
