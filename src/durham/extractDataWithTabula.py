from tabula import read_pdf_with_template
from tabulate import tabulate
import pandas as pd
import os, pdfplumber, glob
import sys, json, re

sys.path.append('..')


def parseArrestReports(reportPath, templatesPath):
    if not reportPath.endswith('/'):
        reportPath += '/'
    import json
    # Initialize the dataframes with Case # as all reports will have it
    columnNames = ['Case #']
    dfArrests = pd.DataFrame(columns=columnNames)
    dfIncidents = pd.DataFrame(columns=columnNames)
    # Names of tabula templates used
    arrestPage1Template = 'arrest-template-page1.json'
    arrestPage1NarrativeTemplate = 'arrest-template-narrative-page1.json'
    arrestPage2Template = 'arrest-template-page2.json'
    incidentPage1 = 'incident-page1.json'
    incidentPage1Table = 'incident-page1-table.json'
    incidentAdditionalProperty = 'incident-additional-property.json'
    incidentAdditionalNameNums = 'additional-names-nums.json'
    incidentAdditionalNameAddPhone = 'additional-names-add-phones-{}.json'
    incidentAdditionalNameNameCodes = 'additional-names-name-code-{}.json'
    incidentAdditionalNameNames = 'additional-names-names-{}.json'
    incidentAdditionalNameVicNum = 'additional-names-vic-num-{}.json'
    incidentAdditionalNameDob = 'additional-names-dob-{}.json'
    incidentAdditionalNameAge = 'additional-names-age-{}.json'
    incidentAdditionalNameSex = 'additional-names-sex-{}.json'
    incidentAdditionalNameRace = 'additional-names-race-{}.json'

    # Loop through all reports, each report is a single PDF
    for report in os.listdir(reportPath):
        # Check to make sure a PdfArrests as JSON templates are also in folder
        if report.endswith('pdf'):
            print(reportPath, report)
            try:
                # Check Length so that 2 page reports are handled correctly
                pdfArrests = pdfplumber.open(reportPath + report)
                page = pdfArrests.pages[0]
                pdfLen = len(pdfArrests.pages)
                text = page.extract_text()
                if text.split("\n")[0] == 'ARREST REPORT':
                    type = 1
                if text.split("\n")[0] == 'INCIDENT/INVESTIGATION':
                    type = 2
            except Exception as e:
                print('Failed', report)
                print(e)
                continue
            if type == 1:
                case = ''
                # Read in the first page of PdfArrests with JSON template generated through Tabula GUI
                arrests = read_pdf_with_template(reportPath + '/' + report, templatesPath + '/' + arrestPage1Template,
                                                 pages='1')
                # Loop through the Dataframes generated by reading the PDF
                # Each box will generate a unique Dataframe
                # We will loop twice, once to get the Case # so we can use it as a index for the overall dataframe
                for x in arrests:
                    columns = list(x.columns)
                    if 'Case #' in columns:
                        case = 'A ' + str(x._get_value(0, 1, takeable=True))
                        case1 = str(x._get_value(0, 1, takeable=True))
                        dfArrests.loc[case, 'Case #'] = case1
                        break
                # The number of inserts fragments the dataframe so for performance reasons copy between each report
                dfArrests = dfArrests.copy()
                # And again to insert all the remaining data
                for x in arrests:
                    l = 1
                    columns = list(x.columns)
                    # Check for the drug table
                    if 'Type Measure' in columns:
                        for ind in x.index:
                            unamedValue = ''
                            for colName in columns:
                                # Tabula generated extra columns due to the entries not being directly below the title
                                # Save the values as the correct column name is the next one over
                                if 'Unnamed:' in colName:
                                    unamedValue = x.loc[ind, colName]
                                    continue
                                if str(x.loc[ind, colName]) == 'nan':
                                    if unamedValue != '':
                                        dfArrests.loc[case, str(colName) + str(' ') + str(l)] = unamedValue
                                        unamedValue = ''
                                    else:
                                        dfArrests.loc[case, str(colName) + str(' ') + str(l)] = ''
                                else:
                                    dfArrests.loc[case, str(colName) + str(' ') + str(l)] = x.loc[ind, colName]
                            l += 1
                    # Tabula generated extra columns for some boxes due to the entries not being directly below the title
                    elif 'Unnamed: 0' in columns:
                        # Create a list of all values and collapse them together, removing any nan values
                        # Collapse columns names too, removing any unnamed columns
                        valueList = x.values.tolist()[0]
                        values = ''
                        columnTitle = ''
                        for y in valueList:
                            if str(y) != 'nan':
                                values += ' ' + str(y)
                        for colName in columns:
                            if 'Unnamed:' not in str(colName):
                                columnTitle += ' ' + str(colName)
                        if str(values) == 'nan':
                            continue
                        dfArrests.loc[case, columnTitle.strip()] = values
                    else:
                        # For all dataframes with one column and one value input them into the large dataframe
                        if x.empty:
                            dfArrests.loc[case, columns[0]] = ''
                            continue
                        if "Case #" in columns:
                            continue
                        entry = x._get_value(0, 0, takeable=True)
                        dfArrests.loc[case, columns[0]] = entry

                # Read in the first page of PdfArrests with JSON template generated through Tabula GUI
                # This is the narrative template because including the narrative box in the full page template
                # caused a large number of erroneous columns and incomplete fields
                arrestsNarrative = read_pdf_with_template(reportPath + '/' + report,
                                                          templatesPath + '/' + arrestPage1NarrativeTemplate,
                                                          pages='1')
                for x in arrestsNarrative:
                    l = 1
                    # The narrative ends up in both columns and values so aggregate into a single string
                    columns = list(x.columns)
                    if x.size < 1:
                        continue
                    try:
                        valueList = x.values.tolist()[0]
                    except:
                        print(reportPath, report)
                        input(x.values)
                    values = ''
                    columnStr = ''
                    for y in valueList:
                        if str(y) != 'nan':
                            values += ' ' + str(y)
                    for colName in columns:
                        if 'Unnamed:' not in str(colName):
                            columnStr += ' ' + str(colName)
                    if str(values) == 'nan':
                        continue
                    narrative = columnStr + values
                    dfArrests.loc[case, 'Narrative'] = narrative

                # For reports with more than 1 page, read the extra charge table and input the values
                if pdfLen > 1:
                    arrests2 = read_pdf_with_template(reportPath + '/' + report,
                                                      templatesPath + '/' + arrestPage2Template,
                                                      pages='2')
                    for x in arrests2:
                        n = 4
                        columns = list(x.columns)
                        for ind in x.index:
                            for colName in columns:
                                dfArrests.loc[case, str(colName) + str(' ') + str(n)] = x.loc[ind, colName]
                            n += 1
            if type == 2:
                case = ''
                # Read in the first page of Pdf incidents with JSON template generated through Tabula GUI
                incidents = read_pdf_with_template(reportPath + '/' + report, templatesPath + '/' + incidentPage1,
                                                   pages='1')
                # Loop through the Dataframes generated by reading the PDF
                # Each box will generate a unique Dataframe
                # We will loop twice, once to get the Case # so we can use it as a index for the overall dataframe
                for x in incidents:
                    columns = list(x.columns)
                    if 'Case #' in columns or 'Case#' in columns:
                        case = 'I ' + str(x._get_value(0, 1, takeable=True))
                        case1 = str(x._get_value(0, 1, takeable=True))
                        dfIncidents.loc[case, 'Case #'] = case1
                        break
                # The number of inserts fragments the dataframe so for performance reasons copy between each report
                dfIncidents = dfIncidents.copy()
                # There can be multiple Victims and each one starts with Type so use as a counter to differentiate
                type = 0
                # Each new victim has 16 fields that will need to have victim number added to their
                # column names, use this as a counter
                t = 0
                # There can be multiple Incidents and each one starts with
                # Crime Incident so use as a counter to differentiate
                incident = 0
                # Each new incident has 6 fields that will need to have incident number added to their
                # column names, use this as a counter
                i = 0
                for x in incidents:
                    specCaseDone = 0
                    columns = list(x.columns)
                    # Check for Victims as they are to be handled in a special way, adding an index number
                    for y in columns:
                        if y.startswith('Type'):
                            type += 1
                            t += 1
                    if type > 0 and t > 0:
                        # Handling the special case of Domestic
                        for y in columns:
                            if y.startswith('Domestic:'):
                                values = y.split(':')
                                columnTitle = values[0]
                                field = values[1]
                                dfIncidents.loc[case, columnTitle.strip()] = field
                                specCaseDone = 1
                            # Handling the special case of Victim Number
                            if y.startswith('Victim'):
                                if len(x.index) > 1:
                                    dfIncidents.loc[case, 'Victim V' + str(type)] = type
                                else:
                                    dfIncidents.loc[case, 'Victim V' + str(type)] = ''
                                specCaseDone = 1
                            # Handling the special case of DOB
                            if y.startswith('DOB'):
                                values = ''
                                columnTitle = ''
                                for _, v in x.iterrows():
                                    for c in columns:
                                        values += str(v[c]) + ' '
                                for colName in columns:
                                    if 'Unnamed:' not in str(colName):
                                        columnTitle += ' ' + str(colName)
                                columnTitle += ' V' + str(type)
                                columnTitle2 = 'Age V' + str(type)
                                dobAge = values.split('Age')
                                # Handle Age ending up in DOB column too
                                if re.match(r'^(?=.*[0-9])', dobAge[0]):
                                    dfIncidents.loc[case, columnTitle] = dobAge[0].strip()
                                else:
                                    dfIncidents.loc[case, columnTitle] = ''
                                if re.match(r'^(?=.*[0-9])', dobAge[1]):
                                    dfIncidents.loc[case, columnTitle2] = dobAge[1].strip()
                                else:
                                    dfIncidents.loc[case, columnTitle2] = ''
                                specCaseDone = 1
                            # Handling the special case of Relationship to Offender
                            if y.startswith('Relationship'):
                                columnTitle = 'Relationship to Offender V' + str(type)
                                values = x['Relationship'].to_list()
                                if len(values) > 1:
                                    field = ' '.join(values[1:])
                                else:
                                    field = ''
                                dfIncidents.loc[case, columnTitle.strip()] = field
                                specCaseDone = 1
                            # Handling the special case of Relationship to Military Branch/Status
                            if y.startswith('Military'):
                                columnTitle = 'Military Branch/Status V' + str(type)
                                values = x['Military'].to_list()
                                if len(values) > 1:
                                    field = ' '.join(values[1:])
                                else:
                                    field = ''
                                dfIncidents.loc[case, columnTitle.strip()] = field
                                specCaseDone = 1
                        # Check if this was a special Case, if not handle as normal
                        if specCaseDone == 0:
                            if 'Unnamed: 0' in columns:
                                # Create a list of all values and collapse them together, removing any nan values
                                # Collapse columns names too, removing any unnamed columns
                                valueList = x.values.tolist()[0]
                                values = ''
                                columnTitle = ''
                                for y in valueList:
                                    if str(y) != 'nan':
                                        values += ' ' + str(y)
                                for colName in columns:
                                    if 'Unnamed:' not in str(colName):
                                        columnTitle += ' ' + str(colName)
                                columnTitle += ' V' + str(type)
                                if str(values) != 'nan':
                                    dfIncidents.loc[case, columnTitle.strip()] = values
                                else:
                                    dfIncidents.loc[case, columnTitle.strip()] = ''
                            else:
                                if x.empty:
                                    dfIncidents.loc[case, str(columns[0]) + ' V' + str(type)] = ''
                                else:
                                    entry = x._get_value(0, 0, takeable=True)
                                    dfIncidents.loc[case, str(columns[0]) + ' V' + str(type)] = entry
                        if type == 1:
                            if t == 16:
                                t = 0
                            else:
                                t += 1
                        else:
                            if t == 15:
                                t = 0
                            else:
                                t += 1
                        dfIncidents = dfIncidents.copy()
                    for y in columns:
                        if y.startswith('Crime Incident'):
                            incident += 1
                            i += 1
                    if incident > 0 and i > 0:
                        # Handling the special case of Crime Incident
                        for y in columns:
                            if y.startswith('Crime Incident'):
                                columnTitle = 'Crime Incident I' + str(incident)
                                field = ''
                                if len(columns) > 1:
                                    if re.match(r'^(?=.*[a-zA-Z])', columns[1]):
                                        for _, v in x.iterrows():
                                            for c in columns:
                                                value = v[c]
                                                if str(value) != 'nan':
                                                    field += ' I' + str(value)
                                        field += ' ' + columns[1]
                                dfIncidents.loc[case, columnTitle.strip()] = field
                                specCaseDone = 1
                        # Check if this was a special Case, if not handle as normal
                        if specCaseDone == 0:
                            # print(x)
                            if 'Unnamed: 0' in columns:
                                # Create a list of all values and collapse them together, removing any nan values
                                # Collapse columns names too, removing any unnamed columns
                                valueList = x.values.tolist()[0]
                                values = ''
                                columnTitle = ''
                                for y in valueList:
                                    if str(y) != 'nan':
                                        values += ' ' + str(y)
                                for colName in columns:
                                    if 'Unnamed:' not in str(colName):
                                        columnTitle += ' I' + str(colName)
                                columnTitle += ' V' + str(incident)
                                if str(values) != 'nan':
                                    dfIncidents.loc[case, columnTitle.strip()] = values
                                else:
                                    dfIncidents.loc[case, columnTitle.strip()] = ''
                            else:
                                if x.empty:
                                    dfIncidents.loc[case, str(columns[0]) + ' I' + str(incident)] = ''
                                else:
                                    entry = x._get_value(0, 0, takeable=True)
                                    dfIncidents.loc[case, str(columns[0]) + ' I' + str(incident)] = entry
                        if incident > 0:
                            if i == 6:
                                i = 0
                            else:
                                i += 1
                        dfIncidents = dfIncidents.copy()
                    outstandingYesNo = 0
                    for y in columns:
                        if y.startswith('Outstanding Stolen'):
                            outstandingYesNo = 1
                            outstandingList = y.split(':')
                            dfIncidents.loc[case, outstandingList[0].strip()] = outstandingList[1]
                    if i == 0 and t == 0 and outstandingYesNo == 0:
                        if 'Unnamed: 0' in columns:
                            # Create a list of all values and collapse them together, removing any nan values
                            # Collapse columns names too, removing any unnamed columns
                            valueList = x.values.tolist()[0]
                            values = ''
                            columnTitle = ''
                            for y in valueList:
                                if str(y) != 'nan':
                                    values += ' ' + str(y)
                            for colName in columns:
                                if 'Unnamed:' not in str(colName):
                                    columnTitle += ' ' + str(colName)
                            if str(values) == 'nan':
                                continue
                            # print(columnTitle, values)
                            # input('asdf')
                            dfIncidents.loc[case, columnTitle.strip()] = values
                        else:
                            # For all dataframes with one column and one value input them into the large dataframe
                            if x.empty:
                                dfIncidents.loc[case, columns[0]] = ''
                                dfIncidents = dfIncidents.copy()
                                continue
                            if "Case #" in columns or "Case#" in columns:
                                dfIncidents = dfIncidents.copy()
                                continue
                            entry = x._get_value(0, 0, takeable=True)
                            dfIncidents.loc[case, columns[0]] = entry
                            dfIncidents = dfIncidents.copy()
                # Read in the first page property table of PdfIncidents with JSON template generated through Tabula GUI
                incidentsProperty = read_pdf_with_template(reportPath + '/' + report,
                                                           templatesPath + '/' + incidentPage1Table,
                                                           pages='1')
                for x in incidentsProperty:
                    columns = list(x.columns)
                    for ind in range(0, len(x.index)):
                        noVal = 0
                        for y in columns:
                            if y.startswith('VI'):
                                columnTitle = 'VI P' + str(ind)
                                if pd.isna(x.loc[ind, y]):
                                    noVal = 1
                            elif y.startswith('Stat'):
                                columnTitle = 'Status Frm/To P' + str(ind)
                                if pd.isna(x.loc[ind, y]):
                                    noVal = 1
                            elif y.startswith('Cod'):
                                columnTitle = 'Code P' + str(ind)
                                if pd.isna(x.loc[ind, y]):
                                    noVal = 1
                            else:
                                columnTitle = y + ' P' + str(ind)
                            if noVal == 1:
                                continue
                            dfIncidents.loc[case, columnTitle] = x._get_value(ind, y)
                            dfIncidents = dfIncidents.copy()
                if pdfLen > 1:
                    # Properly handle the second page of multipage reports
                    for pageNum in range(1, pdfLen):
                        page = pdfArrests.pages[pageNum]
                        text = page.extract_text()
                        subType=-1
                        if text.split("\n")[0].startswith('Incident Report Additional Name'):
                            subType = 1
                        elif text.split("\n")[0].startswith('Incident Report Additional Property'):
                            subType = 2
                        if subType == 1:
                            incidentsAdditionalNameNums = read_pdf_with_template(reportPath + '/' + report,
                                                                                 templatesPath +
                                                                                 incidentAdditionalNameNums,
                                                                                 pages=str(pageNum + 1))
                            addNameList = []
                            for x in incidentsAdditionalNameNums:
                                columns = list(x.columns)
                                # print(tabulate(x, headers='keys', tablefmt='psql', intfmt=".1f"))
                                if re.match(r"[0-9]\)", columns[0]):
                                    addName = columns[0].split(')')[0]
                                    addNameList.append(addName)
                                l = 0
                                for y in range(0, len(addNameList)):
                                    nameDict = {}
                                    l += 1
                                    nameDict['Additional Name #' + str(l)] = addNameList[l - 1]
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameNameCodes.format(l)

                                    incidentsAdditionalNameCodes = read_pdf_with_template(reportPath + '/' + report,
                                                                                          templateStr,
                                                                                          pages=str(pageNum + 1))
                                    nameCodeList = []
                                    for z in incidentsAdditionalNameCodes:
                                        for w in z.columns:
                                            nameCodeList.append(w)
                                    nameCodeStr = ' '.join(nameCodeList)
                                    nameDict['Name Code/# ' + 'Additional Name ' + str(l)] = nameCodeStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameNames.format(l)
                                    incidentsAdditionalNameNames = read_pdf_with_template(reportPath + '/' + report,
                                                                                          templateStr,
                                                                                          pages=str(pageNum + 1))
                                    namesList = []
                                    for z in incidentsAdditionalNameNames:
                                        # print(tabulate(z, headers='keys', tablefmt='psql', intfmt=".1f"))
                                        for w in z.columns:
                                            namesList.append(w)
                                    namesStr = ' '.join(namesList)
                                    nameDict['Name (Last, First, Middle) ' + 'Additional Name ' + str(l)] = namesStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameVicNum.format(l)
                                    incidentsAdditionalNameVicNum = read_pdf_with_template(reportPath + '/' + report,
                                                                                           templateStr,
                                                                                           pages=str(pageNum + 1))
                                    vicNumList = []
                                    for z in incidentsAdditionalNameVicNum:
                                        for w in z.columns:
                                            vicNumList.append(w)
                                    vicNumStr = ' '.join(vicNumList)
                                    nameDict['Victim of Crime # ' + 'Additional Name ' + str(l)] = vicNumStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameDob.format(l)
                                    incidentsAdditionalNameDob = read_pdf_with_template(reportPath + '/' + report,
                                                                                        templateStr,
                                                                                        pages=str(pageNum + 1))
                                    dobList = []
                                    for z in incidentsAdditionalNameDob:
                                        for w in z.columns:
                                            dobList.append(w)
                                    dobStr = ' '.join(dobList)
                                    nameDict['DOB ' + 'Additional Name ' + str(l)] = dobStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameRace.format(l)
                                    incidentsAdditionalNameRace = read_pdf_with_template(reportPath + '/' + report,
                                                                                         templateStr,
                                                                                         pages=str(pageNum + 1))
                                    raceList = []
                                    for z in incidentsAdditionalNameRace:
                                        for w in z.columns:
                                            raceList.append(w)
                                    raceStr = ' '.join(raceList)
                                    nameDict['Race ' + 'Additional Name ' + str(l)] = raceStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameAge.format(l)
                                    incidentsAdditionalNameAge = read_pdf_with_template(reportPath + '/' + report,
                                                                                        templateStr,
                                                                                        pages=str(pageNum + 1))
                                    ageList = []
                                    for z in incidentsAdditionalNameAge:
                                        for w in z.columns:
                                            ageList.append(w)
                                    ageStr = ' '.join(ageList)
                                    nameDict['Age ' + 'Additional Name ' + str(l)] = ageStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameSex.format(l)
                                    incidentsAdditionalNameSex = read_pdf_with_template(reportPath + '/' + report,
                                                                                        templateStr,
                                                                                        pages=str(pageNum + 1))
                                    sexList = []
                                    for z in incidentsAdditionalNameSex:
                                        for w in z.columns:
                                            sexList.append(w)
                                    sexStr = ' '.join(sexList)
                                    nameDict['Sex' + 'Additional Name ' + str(l)] = sexStr
                                    templateStr = templatesPath + 'additionalNames/' + \
                                                  incidentAdditionalNameAddPhone.format(l)
                                    incidentsAdditionalNameAddPhone = read_pdf_with_template(reportPath + '/' + report,
                                                                                             templateStr,
                                                                                             pages=str(pageNum + 1))
                                    namesList = []
                                    for z in incidentsAdditionalNameAddPhone:
                                        columns = z.columns
                                        if columns[0].startswith('Address'):
                                            addList = []
                                            for w in columns[0]:
                                                addList.append(w)
                                            addStr = ' '.join(namesList)
                                            nameDict['Address ' + 'Additional Name ' + str(l)] = addStr
                                        if columns[0].startswith('Empl'):
                                            empAddList = []
                                            for w in columns[0]:
                                                empAddList.append(w)
                                            empAddStr = ' '.join(empAddList)
                                            nameDict['Empl/Addr ' + 'Additional Name ' + str(l)] = empAddStr
                                        if columns[0].startswith('Mobile'):
                                            if re.match(r'^(?=.*[0-9])', columns[1]):
                                                nameDict['Mobile # Additional Name ' + str(l)] = columns[1]
                                            else:
                                                nameDict['Mobile # Additional Name ' + str(l)] = ''
                                        if columns[0].startswith('H:'):
                                            if re.match(r'^(?=.*[0-9])', columns[1]):
                                                nameDict['Home # Additional Name ' + str(l)] = columns[1]
                                            else:
                                                nameDict['Home # Additional Name ' + str(l)] = ''
                                        if columns[0].startswith('B:'):
                                            if re.match(r'^(?=.*[0-9])', columns[1]):
                                                nameDict['Business # Additional Name ' + str(l)] = columns[1]
                                            else:
                                                nameDict['Business # Additional Name ' + str(l)] = ''
                                    for y in nameDict.keys():
                                        dfIncidents.loc[case, y] = nameDict[y]
                                        dfIncidents = dfIncidents.copy()
                        # Parse additional property incident pages
                        if subType == 2:
                            incidentsAdditional = read_pdf_with_template(reportPath + '/' + report, templatesPath + '/'
                                                                         + incidentAdditionalProperty,
                                                                         pages=str(pageNum + 1))

                            propNum = 13
                            # This template pulls things in as a big table but some of the columns are split,
                            # but they are split in a predictable manner so pull the data out into a dictionary
                            # and feed back into the main dataframe row for this case#
                            for x in incidentsAdditional:
                                additionalPropertyDict = {}
                                columns = list(x.columns)
                                # Sometimes property description and make/model are spread over two rows and sometimes
                                # they are not. Handling this with conditionals
                                propCols = 2
                                propColNum1 = 6
                                propColNum2 = 7
                                makeCols = 1
                                makeColUn1 = 8
                                makeColUn2 = 9
                                snCol = 10
                                if not columns[6].startswith('Unnamed'):
                                    propColNum1 -= 1
                                    propCols = 1
                                    makeColUn1 -= 1
                                    makeColUn2 -= 1
                                    snCol -= 1
                                    if not columns[7].startswith('Unnamed'):
                                        makeColUn1 -= 1
                                        makeCols = 1
                                        snCol -= 1
                                elif not columns[8].startswith('Unnamed'):
                                    makeColUn1 -= 1
                                    makeCols = 1
                                    snCol -= 1
                                for index in x.index:
                                    additionalPropertyDict['VI # P' + str(propNum)] = x._get_value(index, 0,
                                                                                                   takeable=True)
                                    additionalPropertyDict['Code P' + str(propNum)] = x._get_value(index, 1,
                                                                                                   takeable=True)
                                    additionalPropertyDict['Status Frm/To P' + str(propNum)] = x._get_value(index, 2,
                                                                                                            takeable=True)
                                    additionalPropertyDict['Value P' + str(propNum)] = x._get_value(index, 3,
                                                                                                    takeable=True)
                                    additionalPropertyDict['OJ P' + str(propNum)] = x._get_value(index, 4,
                                                                                                 takeable=True)
                                    additionalPropertyDict['QTY P' + str(propNum)] = x._get_value(index, 5,
                                                                                                  takeable=True)
                                    if propCols == 2:
                                        additionalPropertyDict['Property Description P' + str(propNum)] = str(str(
                                            x._get_value(index, propColNum1, takeable=True)) + ' ' + str(
                                            x._get_value(index, propColNum2, takeable=True))).replace('nan', '').strip()
                                    elif propCols == 1:
                                        additionalPropertyDict['Property Description P' + str(propNum)] = str(
                                            x._get_value(index, propColNum1, takeable=True)).replace('nan', '').strip()

                                    if makeCols == 2:
                                        additionalPropertyDict['Make P' + str(propNum)] = str(str(
                                            x._get_value(index, makeColUn1, takeable=True)) + ' ' + str(
                                            x._get_value(index, makeColUn2, takeable=True))).replace('nan', '').strip()
                                    elif makeCols == 1:
                                        additionalPropertyDict['Make P' + str(propNum)] = str(
                                            x._get_value(index, makeColUn1, takeable=True)).replace('nan', '').strip()
                                    additionalPropertyDict['Serial Number P' + str(propNum)] = x._get_value(index,
                                                                                                            snCol,
                                                                                                            takeable=True)
                                for y in additionalPropertyDict.keys():
                                    dfIncidents.loc[case, y] = additionalPropertyDict[y]
                                    dfIncidents = dfIncidents.copy()
                                propNum += 1

    return dfArrests, dfIncidents


def main(argv):
    # Pass in command line arguments for report and templates if any
    if argv != []:
        reportPath = argv[0]
        try:
            if not reportPath.endswith('/'):
                reportPath += '/'
        except:
            print('A template file for page 1 must be defined')
            return
    else:
        # hardcode paths if known
        reportPath = '../../data/durham/'
    pathList=[]
    for x in os.walk(reportPath):
        print(x[0])
        pdfList=glob.glob(x[0]+"/*.pdf")
        if len(pdfList)==0:
            continue
        if str(x[0]) in pathList:
            continue
        else:
            pathList.append(str(x[0]))
        dfArrests, dfIncidents = parseArrestReports(str(x[0]), reportPath + 'templates/')

        # print(tabulate(dfArrests, headers='keys', tablefmt='psql', intfmt=".1f"))
        # print(tabulate(dfIncidents, headers='keys', tablefmt='psql', intfmt=".1f"))
        # print(dfIncidents)
        dfArrests.to_csv(x[0] + '/' + 'arrests_reports_data.csv')
        dfIncidents.to_csv(x[0] + '/' + 'incident_reports_data.csv')
        print('Extracted data saved in ' + x[0])


if __name__ == "__main__":
    # try:
    #     main(sys.argv[1:])
    # except:
    #     main([])
    main([])