from tabula import read_pdf_with_template
from tabulate import tabulate
import pandas as pd
import os, PyPDF2
import sys
sys.path.append('..')

#Initialize the dataframe with Case # as all reports will have it
columnNames=['Case #']
df = pd.DataFrame(columns=columnNames)

def main(argv):
    #Pass in command line arguments for report and templates if any

    if argv!=[]:
        reportPath = argv[0]
        if not reportPath.endswith('/'):
            reportPath+='/'
        try:
            page1Template = argv[1]
        except:
            print('A template file for page 1 must be defined')
            return
        try:
            page2Template = argv[2]
        except:
            print('A template file for page 2 must be defined')
            return
    else:
        #hardcode paths if known
        reportPath = '../../data/durhamReports/'
        page1Template = 'tabula-template-page1.json'
        page2Template = 'tabula-template-page2.json'
    # Loop through all reports, each report is a single PDF
    for report in os.listdir(reportPath):
        # Check to make sure a PDF as JSON templates are also in folder
        if report.endswith('pdf'):
            # Check Length so that 2 page reports are handled correctly
            pdfLen = len(PyPDF2.PdfReader(reportPath + report).pages)
            case = ''
            # Read in the first page of PDF with JSON template generated through Tabula GUI
            arrests = read_pdf_with_template(reportPath + report, reportPath + page1Template, pages='1')
            # Loop through the Dataframes generated by reading the PDF
            # Each box will generate a unique Dataframe
            # We will loop twice, once to get the Case # so we can use it as a index for the overall dataframe
            for x in arrests:
                columns = list(x.columns)
                if 'Case #' in columns:
                    case = x._get_value(0, 1, takeable=True)
                    df.loc[case, 'Case #'] = case
                    break
            # And again to insert all the remaining data
            for x in arrests:
                l = 1
                columns = list(x.columns)
                # Check for the drug table
                if 'Type Measure' in columns:
                    for ind in x.index:
                        unamedValue = ''
                        for colName in columns:
                            # Tabula generated extra columns due to the entries not being directly below the title
                            # Save the values as the correct column name is the next one over
                            if 'Unnamed:' in colName:
                                unamedValue = x.loc[ind, colName]
                                continue
                            if str(x.loc[ind, colName]) == 'nan':
                                if unamedValue != '':
                                    df.loc[case, str(colName) + str(' ') + str(l)] = unamedValue
                                    unamedValue = ''
                                else:
                                    df.loc[case, str(colName) + str(' ') + str(l)] = ''
                            else:
                                df.loc[case, str(colName) + str(' ') + str(l)] = x.loc[ind, colName]
                        l += 1
                # Tabula generated extra columns for some boxes due to the entries not being directly below the title
                elif 'Unnamed: 0' in columns:
                    # Create a list of all values and collapse them together, removing any nan values
                    # Collapse columns names too, removing any unnamed columns
                    valueList = x.values.tolist()[0]
                    values = ''
                    columnTitle = ''
                    for y in valueList:
                        if str(y) != 'nan':
                            values += ' ' + str(y)
                    for colName in columns:
                        if 'Unnamed:' not in str(colName):
                            columnTitle += ' ' + str(colName)
                    if str(values) == 'nan':
                        continue
                    df.loc[case, columnTitle.strip()] = values
                else:
                    # For all dataframes with one column and one value input them into the large dataframe
                    if x.empty:
                        df.loc[case, columns[0]] = ''
                        continue
                    if "Case #" in columns:
                        continue
                    entry = x._get_value(0, 0, takeable=True)
                    df.loc[case, columns[0]] = entry
            # For reports with more than 1 page, read the extra charge table and input the values
            if pdfLen > 1:
                arrests2 = read_pdf_with_template(reportPath + report, reportPath + page2Template, pages='2')
                columns = list(x.columns)
                for x in arrests2:
                    n = 4
                    columns = list(x.columns)
                    for ind in x.index:
                        for colName in columns:
                            df.loc[case, str(colName) + str(' ') + str(n)] = x.loc[ind, colName]
                        n += 1

    # print(tabulate(df, headers='keys', tablefmt='psql', intfmt=".1f"))

    df.to_csv(reportPath + 'reports_data.csv')
    print('Extracted data saved in ' + reportPath + 'reports_data.csv')
if __name__ == "__main__":
    main(sys.argv[1:])